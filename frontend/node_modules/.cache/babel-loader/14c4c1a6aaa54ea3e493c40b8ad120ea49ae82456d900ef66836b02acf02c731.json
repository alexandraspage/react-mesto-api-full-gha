{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\nfunction checkResponse(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject('Произошла ошибка');\n}\nexport function register(email, password) {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => checkResponse(res));\n}\n;\nexport function authorize(email, password) {\n  return fetch(`${BASE_URL}/signin`, {\n    method: `POST`,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n}\nexport function getContent(jwt) {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: `GET`,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${jwt}`\n    }\n  }).then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n}","map":{"version":3,"names":["BASE_URL","checkResponse","res","ok","json","Promise","reject","register","email","password","fetch","method","headers","body","JSON","stringify","then","authorize","status","getContent","jwt"],"sources":["/Users/macbook/dev/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\n\nfunction checkResponse(res) {\n    if (res.ok) {\n        return res.json()\n    }\n    return Promise.reject('Произошла ошибка');\n}\n\nexport function register(email, password) {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ email, password })\n    })\n        .then((res) => checkResponse(res));\n};\n\nexport function authorize(email, password) {\n    return fetch(`${BASE_URL}/signin`, {\n        method: `POST`,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ email, password })\n    })\n        .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n}\n\nexport function getContent(jwt) {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: `GET`,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Bearer ${jwt}`\n        }\n    })\n        .then(res => res.ok ? res.json() : Promise.reject(`Ошибка: ${res.status}`));\n}"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAA+B;AAGvD,SAASC,aAAaA,CAACC,GAAG,EAAE;EACxB,IAAIA,GAAG,CAACC,EAAE,EAAE;IACR,OAAOD,GAAG,CAACE,IAAI,EAAE;EACrB;EACA,OAAOC,OAAO,CAACC,MAAM,CAAC,kBAAkB,CAAC;AAC7C;AAEA,OAAO,SAASC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACtC,OAAOC,KAAK,CAAE,GAAEV,QAAS,SAAQ,EAAE;IAC/BW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC5C,CAAC,CAAC,CACGO,IAAI,CAAEd,GAAG,IAAKD,aAAa,CAACC,GAAG,CAAC,CAAC;AAC1C;AAAC;AAED,OAAO,SAASe,SAASA,CAACT,KAAK,EAAEC,QAAQ,EAAE;EACvC,OAAOC,KAAK,CAAE,GAAEV,QAAS,SAAQ,EAAE;IAC/BW,MAAM,EAAG,MAAK;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC5C,CAAC,CAAC,CACGO,IAAI,CAACd,GAAG,IAAIA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,EAAE,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACgB,MAAO,EAAC,CAAC,CAAC;AACnF;AAEA,OAAO,SAASC,UAAUA,CAACC,GAAG,EAAE;EAC5B,OAAOV,KAAK,CAAE,GAAEV,QAAS,WAAU,EAAE;IACjCW,MAAM,EAAG,KAAI;IACbC,OAAO,EAAE;MACL,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAASQ,GAAI;IACnC;EACJ,CAAC,CAAC,CACGJ,IAAI,CAACd,GAAG,IAAIA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,EAAE,GAAGC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACgB,MAAO,EAAC,CAAC,CAAC;AACnF"},"metadata":{},"sourceType":"module","externalDependencies":[]}